// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace projekat.Migrations
{
    [DbContext(typeof(AutobuskaStanicaContext))]
    partial class AutobuskaStanicaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Models.Autobus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<string>("Prevoznik")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Autobusi");
                });

            modelBuilder.Entity("Models.AutobuskaStanica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Autobuska stanica");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Cena")
                        .HasColumnType("int");

                    b.Property<int?>("PutovanjeID")
                        .HasColumnType("int");

                    b.Property<string>("TipKarte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PutovanjeID");

                    b.ToTable("Karte");
                });

            modelBuilder.Entity("Models.Odrediste", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AutobuskaStanicaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("AutobuskaStanicaID");

                    b.ToTable("Odredista");
                });

            modelBuilder.Entity("Models.Put", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AutobusID")
                        .HasColumnType("int");

                    b.Property<int?>("OdredisteID")
                        .HasColumnType("int");

                    b.Property<string>("VremePolaska")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VremeTrajanjaPuta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("brojPeronaPolaska")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AutobusID");

                    b.HasIndex("OdredisteID");

                    b.ToTable("Putovanja");
                });

            modelBuilder.Entity("Models.Rezervacija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CenaRezervacije")
                        .HasColumnType("int");

                    b.Property<string>("DatumPolaska")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PutID")
                        .HasColumnType("int");

                    b.Property<int>("brojRezervacije")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PutID");

                    b.ToTable("Rezervacije");
                });

            modelBuilder.Entity("Models.Sediste", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BrojSedista")
                        .HasColumnType("int");

                    b.Property<int?>("RezervacijaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RezervacijaID");

                    b.ToTable("Sedista");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.HasOne("Models.Put", "Putovanje")
                        .WithMany("Karta")
                        .HasForeignKey("PutovanjeID");

                    b.Navigation("Putovanje");
                });

            modelBuilder.Entity("Models.Odrediste", b =>
                {
                    b.HasOne("Models.AutobuskaStanica", "AutobuskaStanica")
                        .WithMany("Odredista")
                        .HasForeignKey("AutobuskaStanicaID");

                    b.Navigation("AutobuskaStanica");
                });

            modelBuilder.Entity("Models.Put", b =>
                {
                    b.HasOne("Models.Autobus", "Autobus")
                        .WithMany("AutobusPutovanja")
                        .HasForeignKey("AutobusID");

                    b.HasOne("Models.Odrediste", "Odrediste")
                        .WithMany("OdredistePutovanja")
                        .HasForeignKey("OdredisteID");

                    b.Navigation("Autobus");

                    b.Navigation("Odrediste");
                });

            modelBuilder.Entity("Models.Rezervacija", b =>
                {
                    b.HasOne("Models.Put", "Put")
                        .WithMany("Rezervacije")
                        .HasForeignKey("PutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Put");
                });

            modelBuilder.Entity("Models.Sediste", b =>
                {
                    b.HasOne("Models.Rezervacija", "Rezervacija")
                        .WithMany("RezervisanaSedista")
                        .HasForeignKey("RezervacijaID");

                    b.Navigation("Rezervacija");
                });

            modelBuilder.Entity("Models.Autobus", b =>
                {
                    b.Navigation("AutobusPutovanja");
                });

            modelBuilder.Entity("Models.AutobuskaStanica", b =>
                {
                    b.Navigation("Odredista");
                });

            modelBuilder.Entity("Models.Odrediste", b =>
                {
                    b.Navigation("OdredistePutovanja");
                });

            modelBuilder.Entity("Models.Put", b =>
                {
                    b.Navigation("Karta");

                    b.Navigation("Rezervacije");
                });

            modelBuilder.Entity("Models.Rezervacija", b =>
                {
                    b.Navigation("RezervisanaSedista");
                });
#pragma warning restore 612, 618
        }
    }
}
